#!/usr/bin/env python3
"""
Suite de tests automatis√©s compl√®te pour le scraper
Tests unitaires, d'int√©gration, de performance et de r√©gression
"""
import asyncio
import json
import os
import subprocess
import time
import tempfile
from pathlib import Path
from typing import Dict, List, Any, Tuple
import argparse
from datetime import datetime
import shutil
import signal
import threading

class Colors:
    """Couleurs ANSI pour les logs"""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    RESET = '\033[0m'

class TestRunner:
    def __init__(self, verbose: bool = False):
        self.verbose = verbose
        self.results = {
            'passed': 0,
            'failed': 0, 
            'errors': 0,
            'skipped': 0,
            'details': []
        }
        self.start_time = time.time()
        
    def log(self, message: str, color: str = Colors.WHITE):
        """Log avec couleur"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {color}{message}{Colors.RESET}")
        
    def run_command(self, cmd: List[str], timeout: int = 30, capture_output: bool = True) -> Tuple[int, str, str]:
        """Ex√©cute une commande avec timeout"""
        try:
            if capture_output:
                result = subprocess.run(
                    cmd, 
                    capture_output=True, 
                    text=True, 
                    timeout=timeout,
                    cwd=Path(__file__).resolve().parents[1]
                )
                return result.returncode, result.stdout, result.stderr
            else:
                result = subprocess.run(cmd, timeout=timeout, cwd=Path(__file__).resolve().parents[1])
                return result.returncode, "", ""
        except subprocess.TimeoutExpired:
            return -1, "", "Timeout d√©pass√©"
        except Exception as e:
            return -2, "", str(e)
    
    def test_scraper_help(self) -> bool:
        """Test: Affichage de l'aide du scraper"""
        self.log("üîç Test affichage aide...", Colors.CYAN)
        
        code, stdout, stderr = self.run_command([
            "python3", "scraper/spiders/clean_scraper.py", "--help"
        ])
        
        if code == 0 and "--where" in stdout and "--what" in stdout:
            self.log("‚úÖ Aide affich√©e correctement", Colors.GREEN)
            return True
        else:
            self.log(f"‚ùå Erreur aide: code={code}, stderr={stderr[:100]}...", Colors.RED)
            return False
    
    def test_scraper_invalid_args(self) -> bool:
        """Test: Arguments invalides"""
        self.log("üîç Test arguments invalides...", Colors.CYAN)
        
        code, stdout, stderr = self.run_command([
            "python3", "scraper/spiders/clean_scraper.py",
            "--where", "test"
            # Manque --what
        ])
        
        if code != 0:
            self.log("‚úÖ Arguments invalides d√©tect√©s", Colors.GREEN)
            return True
        else:
            self.log("‚ùå Arguments invalides non d√©tect√©s", Colors.RED)
            return False
    
    def test_waf_detection(self) -> bool:
        """Test: D√©tection WAF sur realtor.ca"""
        self.log("üîç Test d√©tection WAF...", Colors.CYAN)
        
        code, stdout, stderr = self.run_command([
            "python3", "scraper/spiders/clean_scraper.py",
            "--where", "test", 
            "--what", "test",
            "--timeout", "5000"
        ])
        
        # Code 2 = WAF bloqu√© (comportement attendu)
        if code == 2:
            self.log("‚úÖ WAF d√©tect√© correctement", Colors.GREEN)
            return True
        elif code == 0:
            self.log("‚ö†Ô∏è  Pas de WAF d√©tect√© (site accessible)", Colors.YELLOW)
            return True
        else:
            self.log(f"‚ùå Erreur d√©tection WAF: code={code}", Colors.RED)
            return False
    
    def test_mock_data_extraction(self) -> bool:
        """Test: Extraction sur donn√©es de test"""
        self.log("üîç Test extraction donn√©es mock...", Colors.CYAN)
        
        # Cr√©er donn√©es de test temporaires
        test_html = """
        <!DOCTYPE html>
        <html>
        <body>
            <div class="listing" data-price="500000">
                <h3>Belle maison √† Montreal</h3>
                <div class="price">500 000$</div>
                <div class="address">123 Rue Test, Montreal</div>
                <div class="details">3 chambres, 2 salles de bain</div>
            </div>
            <div class="listing" data-price="350000">
                <h3>Condo moderne</h3>
                <div class="price">350 000$</div>
                <div class="address">456 Ave Test, Laval</div>
                <div class="details">2 chambres, 1 salle de bain</div>
            </div>
        </body>
        </html>
        """
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False) as f:
            f.write(test_html)
            temp_file = f.name
        
        try:
            code, stdout, stderr = self.run_command([
                "python3", "scraper/spiders/clean_scraper.py",
                "--where", "test",
                "--what", "mock",
                "--source", "mock",
                "--start_url", f"file://{temp_file}",
                "--dom",
                "--timeout", "5000"
            ])
            
            if code == 0 and "‚úÖ Success:" in stdout:
                # V√©rifier le fichier preview
                preview_path = Path("logs/preview_mock.json")
                if preview_path.exists():
                    with open(preview_path) as f:
                        preview = json.load(f)
                    
                    if preview.get('count', 0) > 0 and not preview.get('blocked', True):
                        self.log(f"‚úÖ Extraction mock r√©ussie: {preview['count']} items", Colors.GREEN)
                        return True
            
            self.log(f"‚ùå Extraction mock √©chou√©e: code={code}", Colors.RED)
            return False
            
        finally:
            os.unlink(temp_file)
    
    def test_debug_mode(self) -> bool:
        """Test: Mode debug avec capture"""
        self.log("üîç Test mode debug...", Colors.CYAN)
        
        code, stdout, stderr = self.run_command([
            "python3", "scraper/spiders/clean_scraper.py", 
            "--where", "test",
            "--what", "debug", 
            "--debug",
            "--timeout", "5000"
        ], timeout=60)
        
        # V√©rifier fichiers debug g√©n√©r√©s
        debug_files = list(Path("logs").glob("debug_*.html")) + list(Path("logs").glob("debug_*.png"))
        
        if len(debug_files) > 0:
            self.log(f"‚úÖ Mode debug OK: {len(debug_files)} fichiers g√©n√©r√©s", Colors.GREEN)
            return True
        else:
            self.log("‚ùå Mode debug: aucun fichier g√©n√©r√©", Colors.RED)
            return False
    
    def test_multiple_strategies(self) -> bool:
        """Test: Test de toutes les strat√©gies (XHR, DOM, etc.)"""
        self.log("üîç Test strat√©gies multiples...", Colors.CYAN)
        
        strategies = [
            ("xhr", []),
            ("dom", ["--dom"]),
        ]
        
        success_count = 0
        
        for strategy, args in strategies:
            self.log(f"  - Test strat√©gie {strategy}...", Colors.BLUE)
            
            cmd = [
                "python3", "scraper/spiders/clean_scraper.py",
                "--where", "test",
                "--what", strategy,
                "--timeout", "5000"
            ] + args
            
            code, stdout, stderr = self.run_command(cmd)
            
            if code in [0, 2]:  # 0=success, 2=WAF blocked (OK)
                success_count += 1
                self.log(f"    ‚úÖ {strategy} OK", Colors.GREEN)
            else:
                self.log(f"    ‚ùå {strategy} √©chec: {code}", Colors.RED)
        
        if success_count == len(strategies):
            self.log(f"‚úÖ Toutes les strat√©gies test√©es: {success_count}/{len(strategies)}", Colors.GREEN)
            return True
        else:
            self.log(f"‚ö†Ô∏è  Strat√©gies partielles: {success_count}/{len(strategies)}", Colors.YELLOW)
            return success_count > 0
    
    def test_output_format(self) -> bool:
        """Test: Format de sortie JSON valide"""
        self.log("üîç Test format JSON...", Colors.CYAN)
        
        # Tester avec donn√©es mock pour garantir un output
        test_html = """
        <html><body>
        <div class="listing">
            <div class="price">400000</div>
            <div class="address">Test Address</div>
        </div>
        </body></html>
        """
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False) as f:
            f.write(test_html)
            temp_file = f.name
        
        try:
            code, stdout, stderr = self.run_command([
                "python3", "scraper/spiders/clean_scraper.py",
                "--where", "format-test",
                "--what", "json", 
                "--source", "mock",
                "--start_url", f"file://{temp_file}",
                "--dom",
                "--timeout", "5000"
            ])
            
            preview_path = Path("logs/preview_json.json")
            if preview_path.exists():
                try:
                    with open(preview_path) as f:
                        data = json.load(f)
                    
                    # V√©rifier structure JSON
                    required_fields = ['timestamp', 'count', 'blocked', 'strategy', 'elapsed_sec']
                    if all(field in data for field in required_fields):
                        self.log("‚úÖ Format JSON valide", Colors.GREEN)
                        return True
                    else:
                        missing = [f for f in required_fields if f not in data]
                        self.log(f"‚ùå Champs JSON manquants: {missing}", Colors.RED)
                        return False
                        
                except json.JSONDecodeError as e:
                    self.log(f"‚ùå JSON invalide: {e}", Colors.RED)
                    return False
            else:
                self.log("‚ùå Fichier preview non g√©n√©r√©", Colors.RED)
                return False
                
        finally:
            os.unlink(temp_file)
    
    def test_dev_server_integration(self) -> bool:
        """Test: Int√©gration avec le serveur de dev"""
        self.log("üîç Test int√©gration serveur dev...", Colors.CYAN)
        
        # D√©marrer le serveur en arri√®re-plan
        server_process = None
        try:
            server_process = subprocess.Popen([
                "python3", "scripts/dev_scraper_server.py"
            ], cwd=Path(__file__).resolve().parents[1])
            
            # Attendre que le serveur d√©marre
            time.sleep(3)
            
            # Tester endpoint /run
            code, stdout, stderr = self.run_command([
                "curl", "-X", "POST", 
                "http://127.0.0.1:8000/run",
                "-H", "Content-Type: application/json",
                "-d", '{"where": "test", "what": "server-test", "scraper": "realtor", "debug": false}'
            ], timeout=15)
            
            if code == 0:
                self.log("‚úÖ Serveur de dev r√©pond", Colors.GREEN)
                return True
            else:
                self.log(f"‚ùå Serveur de dev ne r√©pond pas: {stderr}", Colors.RED)
                return False
                
        except Exception as e:
            self.log(f"‚ùå Erreur serveur dev: {e}", Colors.RED)
            return False
            
        finally:
            if server_process:
                server_process.terminate()
                time.sleep(1)
                if server_process.poll() is None:
                    server_process.kill()
    
    def test_performance_basic(self) -> bool:
        """Test: Performance de base (timeout respect√©)"""
        self.log("üîç Test performance...", Colors.CYAN)
        
        start = time.time()
        code, stdout, stderr = self.run_command([
            "python3", "scraper/spiders/clean_scraper.py",
            "--where", "perf-test",
            "--what", "performance",
            "--timeout", "3000"  # 3 secondes max
        ], timeout=10)
        
        elapsed = time.time() - start
        
        if elapsed < 8:  # Doit finir en moins de 8 secondes (avec marge)
            self.log(f"‚úÖ Performance OK: {elapsed:.1f}s", Colors.GREEN)
            return True
        else:
            self.log(f"‚ùå Performance lente: {elapsed:.1f}s", Colors.RED)
            return False
    
    def test_concurrent_execution(self) -> bool:
        """Test: Ex√©cutions concurrentes"""
        self.log("üîç Test ex√©cutions concurrentes...", Colors.CYAN)
        
        def run_scraper(test_id: int):
            """Fonction pour thread de test"""
            code, stdout, stderr = self.run_command([
                "python3", "scraper/spiders/clean_scraper.py",
                "--where", f"concurrent-{test_id}",
                "--what", "concurrent",
                "--timeout", "5000"
            ])
            return code
        
        # Lancer 3 scrapers en parall√®le
        threads = []
        results = []
        
        for i in range(3):
            thread = threading.Thread(target=lambda i=i: results.append(run_scraper(i)))
            threads.append(thread)
            thread.start()
        
        # Attendre que tous finissent
        for thread in threads:
            thread.join(timeout=20)
        
        if len(results) == 3:
            self.log(f"‚úÖ Ex√©cutions concurrentes OK: {results}", Colors.GREEN)
            return True
        else:
            self.log(f"‚ùå Ex√©cutions concurrentes √©chou√©es: {len(results)}/3", Colors.RED)
            return False
    
    def test_file_cleanup(self) -> bool:
        """Test: Nettoyage des fichiers temporaires"""
        self.log("üîç Test nettoyage fichiers...", Colors.CYAN)
        
        # Compter fichiers avant
        logs_before = len(list(Path("logs").glob("*")))
        
        # Ex√©cuter scraper
        code, stdout, stderr = self.run_command([
            "python3", "scraper/spiders/clean_scraper.py",
            "--where", "cleanup-test",
            "--what", "cleanup"
        ])
        
        # Compter fichiers apr√®s
        logs_after = len(list(Path("logs").glob("*")))
        
        # Ne doit pas y avoir explosion de fichiers temporaires
        if logs_after - logs_before < 10:  # Max 10 nouveaux fichiers
            self.log("‚úÖ Pas d'accumulation de fichiers", Colors.GREEN)
            return True
        else:
            self.log(f"‚ö†Ô∏è  Possible accumulation: +{logs_after - logs_before} fichiers", Colors.YELLOW)
            return True  # Warning mais pas √©chec
    
    def run_all_tests(self) -> Dict[str, Any]:
        """Ex√©cute tous les tests"""
        tests = [
            ("Arguments & Aide", self.test_scraper_help),
            ("Arguments Invalides", self.test_scraper_invalid_args),
            ("D√©tection WAF", self.test_waf_detection),
            ("Extraction Mock", self.test_mock_data_extraction),
            ("Mode Debug", self.test_debug_mode),
            ("Strat√©gies Multiples", self.test_multiple_strategies),
            ("Format JSON", self.test_output_format),
            ("Performance", self.test_performance_basic),
            ("Ex√©cutions Concurrentes", self.test_concurrent_execution),
            ("Nettoyage Fichiers", self.test_file_cleanup),
            ("Int√©gration Serveur", self.test_dev_server_integration),
        ]
        
        self.log(f"\nüöÄ D√©marrage de {len(tests)} tests...\n", Colors.BOLD)
        
        for test_name, test_func in tests:
            self.log(f"\n{'='*60}", Colors.MAGENTA)
            self.log(f"Test: {test_name}", Colors.BOLD)
            self.log(f"{'='*60}", Colors.MAGENTA)
            
            try:
                start = time.time()
                success = test_func()
                elapsed = time.time() - start
                
                if success:
                    self.results['passed'] += 1
                    self.log(f"‚úÖ PASS√â ({elapsed:.1f}s)\n", Colors.GREEN)
                else:
                    self.results['failed'] += 1
                    self.log(f"‚ùå √âCHOU√â ({elapsed:.1f}s)\n", Colors.RED)
                
                self.results['details'].append({
                    'name': test_name,
                    'success': success,
                    'elapsed': elapsed
                })
                
            except Exception as e:
                self.results['errors'] += 1
                self.log(f"üí• ERREUR: {e}\n", Colors.RED)
                self.results['details'].append({
                    'name': test_name,
                    'success': False,
                    'error': str(e),
                    'elapsed': 0
                })
        
        # Rapport final
        total_time = time.time() - self.start_time
        self.generate_report(total_time)
        
        return self.results
    
    def generate_report(self, total_time: float):
        """G√©n√®re un rapport de test"""
        total_tests = self.results['passed'] + self.results['failed'] + self.results['errors']
        success_rate = (self.results['passed'] / total_tests * 100) if total_tests > 0 else 0
        
        self.log(f"\n{'='*80}", Colors.BOLD)
        self.log(f"üìä RAPPORT FINAL", Colors.BOLD)
        self.log(f"{'='*80}", Colors.BOLD)
        
        self.log(f"‚úÖ Pass√©s: {self.results['passed']}", Colors.GREEN)
        self.log(f"‚ùå √âchecs: {self.results['failed']}", Colors.RED)
        self.log(f"üí• Erreurs: {self.results['errors']}", Colors.RED)
        self.log(f"üìà Taux de r√©ussite: {success_rate:.1f}%", Colors.CYAN)
        self.log(f"‚è±Ô∏è  Temps total: {total_time:.1f}s", Colors.BLUE)
        
        # Sauvegarde rapport JSON
        report = {
            'timestamp': datetime.now().isoformat(),
            'total_time': total_time,
            'success_rate': success_rate,
            **self.results
        }
        
        report_path = Path("logs/test_report.json")
        report_path.write_text(json.dumps(report, indent=2, ensure_ascii=False))
        self.log(f"üíæ Rapport sauv√©: {report_path}", Colors.MAGENTA)

def main():
    parser = argparse.ArgumentParser(description="Suite de tests automatis√©s pour le scraper")
    parser.add_argument('-v', '--verbose', action='store_true', help='Mode verbeux')
    parser.add_argument('--test', help='Ex√©cuter un test sp√©cifique')
    args = parser.parse_args()
    
    runner = TestRunner(verbose=args.verbose)
    
    if args.test:
        # Test sp√©cifique
        test_method = getattr(runner, f'test_{args.test}', None)
        if test_method:
            success = test_method()
            return 0 if success else 1
        else:
            runner.log(f"‚ùå Test '{args.test}' non trouv√©", Colors.RED)
            return 1
    else:
        # Tous les tests
        results = runner.run_all_tests()
        return 0 if results['failed'] == 0 and results['errors'] == 0 else 1

if __name__ == "__main__":
    import sys
    sys.exit(main())
