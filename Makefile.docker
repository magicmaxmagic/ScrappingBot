# ScrappingBot - Docker Management Makefile

# Variables
DOCKER_COMPOSE = docker-compose
PROJECT_NAME = scrappingbot
SERVICES = postgres redis etl api scraper chatbot ollama scheduler grafana nginx frontend

# Colors for output
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

.PHONY: help build up down clean logs status test deploy

help: ## Affiche cette aide
	@echo "$(YELLOW)ScrappingBot Docker Management$(NC)"
	@echo ""
	@echo "$(GREEN)Commandes disponibles:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

build: ## Construire toutes les images Docker
	@echo "$(YELLOW)üî® Construction des images Docker...$(NC)"
	$(DOCKER_COMPOSE) build

build-etl: ## Construire seulement l'image ETL
	@echo "$(YELLOW)üî® Construction de l'image ETL...$(NC)"
	$(DOCKER_COMPOSE) build etl

build-api: ## Construire seulement l'image API
	@echo "$(YELLOW)üî® Construction de l'image API...$(NC)"
	$(DOCKER_COMPOSE) build api

build-scraper: ## Construire seulement l'image Scraper
	@echo "$(YELLOW)üî® Construction de l'image Scraper...$(NC)"
	$(DOCKER_COMPOSE) build scraper

up: ## D√©marrer tous les services
	@echo "$(YELLOW)üöÄ D√©marrage de tous les services...$(NC)"
	$(DOCKER_COMPOSE) up -d
	@echo "$(GREEN)‚úÖ Services d√©marr√©s$(NC)"
	@$(MAKE) status

up-core: ## D√©marrer seulement les services de base (postgres, redis, etl, api)
	@echo "$(YELLOW)üöÄ D√©marrage des services de base...$(NC)"
	$(DOCKER_COMPOSE) up -d postgres redis etl api
	@echo "$(GREEN)‚úÖ Services de base d√©marr√©s$(NC)"

up-etl: ## D√©marrer seulement ETL avec ses d√©pendances
	@echo "$(YELLOW)üöÄ D√©marrage d'ETL avec d√©pendances...$(NC)"
	$(DOCKER_COMPOSE) up -d postgres redis etl
	@echo "$(GREEN)‚úÖ ETL d√©marr√©$(NC)"

down: ## Arr√™ter tous les services
	@echo "$(YELLOW)üõë Arr√™t de tous les services...$(NC)"
	$(DOCKER_COMPOSE) down
	@echo "$(GREEN)‚úÖ Services arr√™t√©s$(NC)"

restart: ## Red√©marrer tous les services
	@echo "$(YELLOW)üîÑ Red√©marrage des services...$(NC)"
	$(DOCKER_COMPOSE) restart
	@echo "$(GREEN)‚úÖ Services red√©marr√©s$(NC)"

restart-etl: ## Red√©marrer seulement le service ETL
	@echo "$(YELLOW)üîÑ Red√©marrage d'ETL...$(NC)"
	$(DOCKER_COMPOSE) restart etl
	@echo "$(GREEN)‚úÖ ETL red√©marr√©$(NC)"

clean: ## Nettoyer les containers et images
	@echo "$(YELLOW)üßπ Nettoyage des containers...$(NC)"
	$(DOCKER_COMPOSE) down -v --rmi all --remove-orphans
	docker system prune -f
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

logs: ## Afficher les logs de tous les services
	$(DOCKER_COMPOSE) logs -f

logs-etl: ## Afficher les logs ETL
	$(DOCKER_COMPOSE) logs -f etl

logs-api: ## Afficher les logs API
	$(DOCKER_COMPOSE) logs -f api

logs-scraper: ## Afficher les logs Scraper
	$(DOCKER_COMPOSE) logs -f scraper

logs-postgres: ## Afficher les logs PostgreSQL
	$(DOCKER_COMPOSE) logs -f postgres

status: ## Afficher le statut des services
	@echo "$(YELLOW)üìä Statut des services:$(NC)"
	$(DOCKER_COMPOSE) ps
	@echo ""
	@echo "$(GREEN)üåê Services accessibles:$(NC)"
	@echo "  Frontend:     http://localhost:3000"
	@echo "  API:          http://localhost:8787"
	@echo "  Chatbot:      http://localhost:8080"
	@echo "  ETL:          http://localhost:8788"
	@echo "  Grafana:      http://localhost:3001"
	@echo "  Ollama:       http://localhost:11434"
	@echo "  PostgreSQL:   localhost:5432"
	@echo "  Redis:        localhost:6379"

health: ## V√©rifier la sant√© des services
	@echo "$(YELLOW)üè• V√©rification de la sant√© des services...$(NC)"
	@for service in $(SERVICES); do \
		if $(DOCKER_COMPOSE) ps $$service | grep -q "Up (healthy)"; then \
			echo "$(GREEN)‚úÖ $$service: Healthy$(NC)"; \
		elif $(DOCKER_COMPOSE) ps $$service | grep -q "Up"; then \
			echo "$(YELLOW)‚ö†Ô∏è  $$service: Running but not healthy$(NC)"; \
		else \
			echo "$(RED)‚ùå $$service: Not running$(NC)"; \
		fi; \
	done

test-docker: ## Tester l'environnement Docker
	@echo "$(YELLOW)üß™ Test de l'environnement Docker...$(NC)"
	$(DOCKER_COMPOSE) exec etl python -c "import etl; print('ETL module OK')"
	$(DOCKER_COMPOSE) exec postgres pg_isready -U scrappingbot_user -d scrappingbot
	$(DOCKER_COMPOSE) exec redis redis-cli ping
	@echo "$(GREEN)‚úÖ Tests Docker r√©ussis$(NC)"

exec-etl: ## Ouvrir un shell dans le container ETL
	$(DOCKER_COMPOSE) exec etl bash

exec-postgres: ## Ouvrir un shell dans PostgreSQL
	$(DOCKER_COMPOSE) exec postgres psql -U scrappingbot_user -d scrappingbot

exec-redis: ## Ouvrir un shell dans Redis
	$(DOCKER_COMPOSE) exec redis redis-cli

deploy: build up ## D√©ployer l'application compl√®te
	@echo "$(GREEN)üéâ D√©ploiement termin√©!$(NC)"
	@$(MAKE) status

# Commandes ETL sp√©cifiques
etl-normalize: ## Ex√©cuter la normalisation ETL
	$(DOCKER_COMPOSE) exec etl python -m etl.normalize --file data/raw/sample.json

etl-dedupe: ## Ex√©cuter la d√©duplication ETL
	$(DOCKER_COMPOSE) exec etl python -m etl.dedupe --file data/processed/normalized.json

etl-full: ## Ex√©cuter le pipeline ETL complet
	$(DOCKER_COMPOSE) exec etl python -m etl.orchestrator --mode full

# Commandes de maintenance
backup-db: ## Sauvegarder la base de donn√©es
	@echo "$(YELLOW)üíæ Sauvegarde de la base de donn√©es...$(NC)"
	$(DOCKER_COMPOSE) exec postgres pg_dump -U scrappingbot_user scrappingbot > backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "$(GREEN)‚úÖ Sauvegarde termin√©e$(NC)"

restore-db: ## Restaurer la base de donn√©es (utiliser: make restore-db FILE=backup.sql)
	@if [ -z "$(FILE)" ]; then echo "$(RED)‚ùå Usage: make restore-db FILE=backup.sql$(NC)"; exit 1; fi
	@echo "$(YELLOW)üì• Restauration de la base de donn√©es...$(NC)"
	$(DOCKER_COMPOSE) exec -T postgres psql -U scrappingbot_user -d scrappingbot < $(FILE)
	@echo "$(GREEN)‚úÖ Restauration termin√©e$(NC)"

monitor: ## Ouvrir le monitoring (Grafana)
	@echo "$(YELLOW)üìä Ouverture du monitoring...$(NC)"
	@open http://localhost:3001 || echo "Grafana disponible sur: http://localhost:3001"

# Raccourcis utiles
dev: up-core ## Mode d√©veloppement (services de base seulement)
	@echo "$(GREEN)üöÄ Mode d√©veloppement activ√©$(NC)"

prod: deploy ## Mode production (tous les services)

quick-test: up-etl test-docker ## Test rapide ETL
	@echo "$(GREEN)‚úÖ Test rapide termin√©$(NC)"
